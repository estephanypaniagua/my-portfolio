"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _router = require("@sanity/base/router");

var _icons = require("@sanity/icons");

var _react = _interopRequireWildcard(require("react"));

var _intentResolver = require("../components/intentResolver");

var _DeskTool = require("../DeskTool");

var _getIntentState = require("../getIntentState");

var _router2 = require("../router");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var _default = {
  router: _router2.router,
  canHandleIntent,
  getIntentState: _getIntentState.getIntentState,
  title: 'Desk',
  name: 'desk',
  icon: _icons.MasterDetailIcon,
  component: DeskToolRoot
};
exports.default = _default;

function canHandleIntent(intentName, params) {
  return Boolean(intentName === 'edit' && params.id || intentName === 'create' && params.type || intentName === 'create' && params.template);
}

function DeskToolRoot() {
  var routerState = (0, _router.useRouterState)();

  var _ref = routerState || {},
      intent = _ref.intent,
      params = _ref.params,
      payload = _ref.payload;

  (0, _react.useEffect)(() => {
    // Set active panes to blank on mount and unmount
    (0, _getIntentState.setActivePanes)([]);
    return () => (0, _getIntentState.setActivePanes)([]);
  }, []);
  return (0, _react.useMemo)(() => intent ? /*#__PURE__*/_react.default.createElement(_intentResolver.IntentResolver, {
    intent: intent,
    params: params,
    payload: payload
  }) : /*#__PURE__*/_react.default.createElement(_DeskTool.DeskTool, {
    onPaneChange: _getIntentState.setActivePanes
  }), [intent, params, payload]);
}