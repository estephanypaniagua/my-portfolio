"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._calcPaneResize = _calcPaneResize;
exports._getDOMPath = _getDOMPath;
exports._sortPaneConfigs = _sortPaneConfigs;

var _constants = require("./constants");

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/**
 * @internal
 */
function _getDOMPath(rootElement, el) {
  var path = [];
  var e = el;

  while (e !== rootElement) {
    var parentElement = e.parentElement;
    if (!parentElement) return path;
    var children = Array.from(parentElement.childNodes);
    var index = children.indexOf(e);
    path.unshift(index);

    if (parentElement === rootElement) {
      return path;
    }

    e = parentElement;
  }

  return path;
}

var EMPTY_PATH = [];
/**
 * @internal
 */

function _sortPaneConfigs(rootElement, paneConfigs) {
  if (!rootElement) return;
  var map = new WeakMap();

  var _iterator = _createForOfIteratorHelper(paneConfigs),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var config = _step.value;
      map.set(config.element, _getDOMPath(rootElement, config.element));
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  var _sort = (a, b) => {
    var _a = map.get(a.element) || EMPTY_PATH;

    var _b = map.get(b.element) || EMPTY_PATH;

    var len = Math.max(_a.length, _b.length); // Loop until there are different indexes

    for (var i = 0; i < len; i += 1) {
      var aIndex = _a[i] || -1;
      var bIndex = _b[i] || -1;

      if (aIndex !== bIndex) {
        return aIndex - bIndex;
      }
    }

    return 0;
  };

  paneConfigs.sort(_sort);
}

function _calcPaneResize(cache, left, right, deltaX) {
  var sumW = cache.left.width + cache.right.width;
  var sumFlex = cache.left.flex + cache.right.flex;
  var leftMinWidth = left.opts.minWidth || _constants.PANE_DEFAULT_MIN_WIDTH;
  var rightMinWidth = right.opts.minWidth || _constants.PANE_DEFAULT_MIN_WIDTH;
  var leftMaxWidth = left.opts.maxWidth || sumW - rightMinWidth;
  var rightMaxWidth = right.opts.maxWidth || sumW - leftMinWidth;
  var minDeltaX = Math.min(leftMinWidth - cache.left.width, rightMaxWidth - sumW);
  var maxDeltaX = Math.min(cache.right.width - rightMinWidth, cache.right.width - (sumW - leftMaxWidth));

  var _deltaX = Math.min(Math.max(deltaX, minDeltaX), maxDeltaX);

  var leftW = cache.left.width + _deltaX;
  var rightW = cache.right.width - _deltaX;
  var leftFlex = leftW / sumW * sumFlex;
  var rightFlex = rightW / sumW * sumFlex;
  return {
    leftFlex,
    leftW,
    rightFlex,
    rightW
  };
}