"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PaneLayout = PaneLayout;

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _PaneLayoutContext = require("./PaneLayoutContext");

var _helpers = require("./_helpers");

var _constants = require("./constants");

var _PaneLayout = require("./PaneLayout.styles");

var _excluded = ["children", "minWidth", "onCollapse", "onExpand"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 * @beta This API will change. DO NOT USE IN PRODUCTION.
 */
function PaneLayout(props) {
  var children = props.children,
      minWidth = props.minWidth,
      onCollapse = props.onCollapse,
      onExpand = props.onExpand,
      restProps = _objectWithoutProperties(props, _excluded);

  var _useState = (0, _react.useState)(null),
      _useState2 = _slicedToArray(_useState, 2),
      rootElement = _useState2[0],
      setRootElement = _useState2[1];

  var rootRect = (0, _ui.useElementRect)(rootElement);

  var _useState3 = (0, _react.useState)([]),
      _useState4 = _slicedToArray(_useState3, 2),
      paneConfigs = _useState4[0],
      setPaneConfigs = _useState4[1];

  var paneConfigsRef = (0, _react.useRef)(paneConfigs);

  var _useState5 = (0, _react.useState)([]),
      _useState6 = _slicedToArray(_useState5, 2),
      paneStates = _useState6[0],
      setPaneStates = _useState6[1];

  var _useState7 = (0, _react.useState)(null),
      _useState8 = _slicedToArray(_useState7, 2),
      expandedElement = _useState8[0],
      setExpandedElement = _useState8[1];

  var width = rootRect === null || rootRect === void 0 ? void 0 : rootRect.width;
  var collapsed = width === undefined || !minWidth ? undefined : width < minWidth;

  var _useState9 = (0, _react.useState)(new Map()),
      _useState10 = _slicedToArray(_useState9, 2),
      resizeMap = _useState10[0],
      setResizeMap = _useState10[1];

  var resizeMapRef = (0, _react.useRef)(resizeMap);
  var cacheRef = (0, _react.useRef)({});

  var _useState11 = (0, _react.useState)(false),
      _useState12 = _slicedToArray(_useState11, 2),
      resizing = _useState12[0],
      setResizing = _useState12[1];

  var panesRef = (0, _react.useRef)([]);
  var collapse = (0, _react.useCallback)(element => {
    var paneConfig = paneConfigsRef.current.find(c => c.element === element);
    var paneIndex = paneConfig ? paneConfigsRef.current.indexOf(paneConfig) : -1;
    var panes = panesRef.current;
    setPaneStates(() => {
      return paneConfigsRef.current.map((p, i) => {
        var _panes$i;

        return {
          element: panes[i].element,
          collapsed: paneIndex === i ? true : (_panes$i = panes[i]) === null || _panes$i === void 0 ? void 0 : _panes$i.collapsed
        };
      });
    });
  }, []);
  var expand = (0, _react.useCallback)(element => {
    var paneConfig = paneConfigsRef.current.find(c => c.element === element);
    var paneIndex = paneConfig ? paneConfigsRef.current.indexOf(paneConfig) : -1;
    var panes = panesRef.current;
    setPaneStates(() => {
      return paneConfigsRef.current.map((p, i) => {
        var _panes$i3;

        if (paneIndex === i) {
          return {
            element,
            collapsed: false
          };
        } // left
        // reset `collapsed` flag of expanded panes


        if (i < paneIndex) {
          var _panes$i2;

          return {
            element: panes[i].element,
            collapsed: (_panes$i2 = panes[i]) !== null && _panes$i2 !== void 0 && _panes$i2.collapsed ? true : undefined
          };
        }

        return {
          element: panes[i].element,
          collapsed: (_panes$i3 = panes[i]) === null || _panes$i3 === void 0 ? void 0 : _panes$i3.collapsed
        };
      });
    });
    setExpandedElement(element);
  }, []);
  var resize = (0, _react.useCallback)((type, element, deltaX) => {
    var cache = cacheRef.current;
    var panes = paneConfigsRef.current;
    var leftPane = panes.find(p => p.element === element);

    if (!leftPane) {
      return;
    }

    var leftPaneIndex = panes.indexOf(leftPane);
    var rightPane = panes[leftPaneIndex + 1];

    if (!rightPane) {
      return;
    }

    if (type === 'start') {
      setResizing(true);
      cache.left = {
        element: leftPane.element,
        flex: leftPane.opts.flex || 1,
        width: leftPane.element.offsetWidth
      };
      cache.right = {
        element: rightPane.element,
        flex: rightPane.opts.flex || 1,
        width: rightPane.element.offsetWidth
      };
    }

    if (type === 'move' && cache.left && cache.right) {
      var _resizeMap = new Map();

      var _calcPaneResize2 = (0, _helpers._calcPaneResize)(cache, leftPane, rightPane, deltaX),
          leftW = _calcPaneResize2.leftW,
          rightW = _calcPaneResize2.rightW,
          leftFlex = _calcPaneResize2.leftFlex,
          rightFlex = _calcPaneResize2.rightFlex;

      _resizeMap.set(leftPane.element, {
        currentMaxWidth: leftW,
        flex: leftFlex
      });

      _resizeMap.set(rightPane.element, {
        currentMaxWidth: rightW,
        flex: rightFlex
      });

      resizeMapRef.current = _resizeMap;
      setResizeMap(_resizeMap);
    }

    if (type === 'end') {
      setResizing(false);
      var _resizeMap2 = resizeMapRef.current;
      setPaneConfigs(v => {
        var nextPaneConfigs = v.map(p => {
          if (p === leftPane || p === rightPane) {
            var r = _resizeMap2.get(p.element);

            return _objectSpread(_objectSpread({}, p), {}, {
              opts: _objectSpread(_objectSpread({}, p.opts), {}, {
                currentMaxWidth: (r === null || r === void 0 ? void 0 : r.currentMaxWidth) || p.opts.currentMaxWidth,
                flex: (r === null || r === void 0 ? void 0 : r.flex) || p.opts.flex
              })
            });
          }

          return p;
        });
        paneConfigsRef.current = nextPaneConfigs;
        return nextPaneConfigs;
      });
      setResizeMap(new Map());
    }
  }, []);
  var mount = (0, _react.useCallback)((element, opts) => {
    var paneConfig = {
      element,
      opts
    };
    var nextPaneConfigs = paneConfigsRef.current.concat([paneConfig]);
    (0, _helpers._sortPaneConfigs)(rootElement, nextPaneConfigs);
    paneConfigsRef.current = nextPaneConfigs;
    setPaneConfigs(nextPaneConfigs);
    var paneIndex = nextPaneConfigs.indexOf(paneConfig);
    var isLast = paneIndex === nextPaneConfigs.length - 1;

    if (isLast) {
      setExpandedElement(element);
    }

    return () => {
      nextPaneConfigs = paneConfigsRef.current.filter(i => i.element !== element);
      paneConfigsRef.current = nextPaneConfigs;
      setPaneConfigs(nextPaneConfigs);
    };
  }, [rootElement]);
  var panes = (0, _react.useMemo)(() => {
    if (!width) {
      return [];
    } // Insert the expanded pane config at the end,
    // so it has the least chance of being defined as collapsed


    var expandedPaneConfig = paneConfigs.find(pc => pc.element === expandedElement);

    var _paneConfigs = paneConfigs.filter(pc => pc !== expandedPaneConfig);

    if (expandedPaneConfig) {
      _paneConfigs.push(expandedPaneConfig);
    }

    var paneMap = new WeakMap();
    var len = paneConfigs.length;
    var collapsedIndexes = [];
    var lastIndex = len - 1;
    var collapsedWidth = lastIndex * 51;
    var remaingWidth = width - collapsedWidth; // Figure out which panes to collapse:
    // - if a pane’s minimum width is larger than the remaining width
    // - if a pane is explictly collapsed by user input

    var _loop = function _loop(i) {
      var config = _paneConfigs[i];
      var paneMinWidth = config.opts.minWidth || _constants.PANE_DEFAULT_MIN_WIDTH;
      var paneState = paneStates.find(p => p.element === config.element);
      var shouldCollapse = (paneState === null || paneState === void 0 ? void 0 : paneState.collapsed) === true || paneMinWidth > remaingWidth;

      if (shouldCollapse) {
        remaingWidth -= _constants.PANE_COLLAPSED_WIDTH;
        collapsedIndexes.push(i);
      } else {
        remaingWidth -= paneMinWidth - _constants.PANE_COLLAPSED_WIDTH;
      }
    };

    for (var i = lastIndex; i >= 0; i -= 1) {
      _loop(i);
    } // Collect pane data to provide to each pane


    for (var _i2 = 0; _i2 < len; _i2 += 1) {
      var config = _paneConfigs[_i2];
      var r = resizeMap.get(config.element);
      paneMap.set(config, {
        element: config.element,
        collapsed: collapsedIndexes.includes(_i2),
        currentMaxWidth: (r === null || r === void 0 ? void 0 : r.currentMaxWidth) || config.opts.currentMaxWidth || 0,
        flex: (r === null || r === void 0 ? void 0 : r.flex) || config.opts.flex || 1
      });
    }

    var _panes = paneConfigs.map(config => paneMap.get(config)).filter(Boolean);

    panesRef.current = _panes;
    return _panes;
  }, [expandedElement, resizeMap, paneConfigs, paneStates, width]);
  (0, _react.useEffect)(() => {
    if (collapsed === undefined) return;
    if (collapsed && onCollapse) onCollapse();
    if (!collapsed && onExpand) onExpand();
  }, [collapsed, onCollapse, onExpand]);
  var contextValue = (0, _react.useMemo)(() => ({
    collapse,
    collapsed,
    expand,
    mount,
    resize,
    panes
  }), [collapse, collapsed, expand, mount, resize, panes]);
  return /*#__PURE__*/_react.default.createElement(_PaneLayoutContext.PaneLayoutContext.Provider, {
    value: contextValue
  }, /*#__PURE__*/_react.default.createElement(_PaneLayout.Root, _extends({
    "data-ui": "PaneLayout"
  }, restProps, {
    "data-collapsed": collapsed ? '' : undefined,
    "data-resizing": resizing ? '' : undefined,
    "data-mounted": width ? '' : undefined,
    ref: setRootElement
  }), children));
}