"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DeskToolPane = void 0;

var _react = _interopRequireWildcard(require("react"));

var _paneRouter = require("../contexts/paneRouter");

var _document = require("./document");

var _documentList = require("./documentList");

var _list = require("./list");

var _unknown = require("./unknown");

var _userComponent = require("./userComponent");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var paneMap = {
  component: _userComponent.UserComponentPane,
  document: _document.DocumentPane,
  documentList: _documentList.DocumentListPane,
  list: _list.ListPane
};
/**
 * @note The same pane might appear multiple times (split pane), so use index as tiebreaker
 *
 * @internal
 */

var DeskToolPane = /*#__PURE__*/(0, _react.memo)(function DeskToolPane(props) {
  var active = props.active,
      childItemId = props.childItemId,
      groupIndex = props.groupIndex,
      index = props.index,
      itemId = props.itemId,
      pane = props.pane,
      paneKey = props.paneKey,
      params = props.params,
      payload = props.payload,
      selected = props.selected,
      siblingIndex = props.siblingIndex;
  var PaneComponent = paneMap[pane.type] || _unknown.UnknownPane;
  return /*#__PURE__*/_react.default.createElement(_paneRouter.PaneRouterProvider, {
    flatIndex: index,
    index: groupIndex,
    params: params,
    payload: payload,
    siblingIndex: siblingIndex
  }, /*#__PURE__*/_react.default.createElement(PaneComponent, {
    childItemId: childItemId || '',
    index: index,
    itemId: itemId,
    isActive: active,
    isSelected: selected,
    paneKey: paneKey // @ts-expect-error TS doesn't know how to handle this intersection
    ,
    pane: pane
  }));
});
exports.DeskToolPane = DeskToolPane;