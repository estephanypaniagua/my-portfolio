"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UserComponentPaneHeader = UserComponentPaneHeader;

var _react = _interopRequireWildcard(require("react"));

var _icons = require("@sanity/icons");

var _ui = require("@sanity/ui");

var _IntentButton = require("../../components/IntentButton");

var _pane = require("../../components/pane");

var _deskTool = require("../../contexts/deskTool");

var _paneRouter = require("../../contexts/paneRouter");

var _useDeskToolPaneActions = require("../useDeskToolPaneActions");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function UserComponentPaneHeader(props) {
  var actionHandlers = props.actionHandlers,
      index = props.index,
      menuItemsProp = props.menuItems,
      menuItemGroups = props.menuItemGroups,
      title = props.title;

  var _usePane = (0, _pane.usePane)(),
      collapsed = _usePane.collapsed;

  var _useDeskTool = (0, _deskTool.useDeskTool)(),
      features = _useDeskTool.features;

  var handleAction = (0, _react.useCallback)(item => {
    var handler = null;

    if (typeof item.action === 'function') {
      handler = item.action;
    } else if (typeof item.action === 'string') {
      handler = actionHandlers && actionHandlers[item.action];
    }

    if (typeof handler === 'function') {
      handler(item.params);
    } else {
      // eslint-disable-next-line no-console
      console.warn('No handler defined for action:', item.action);
    }
  }, [actionHandlers]);

  var _useDeskToolPaneActio = (0, _useDeskToolPaneActions.useDeskToolPaneActions)({
    collapsed,
    menuItems: menuItemsProp
  }),
      actionItems = _useDeskToolPaneActio.actionItems,
      menuItems = _useDeskToolPaneActio.menuItems;

  var contextMenu = (0, _react.useMemo)(() => {
    if (menuItems.length === 0) return null;
    return /*#__PURE__*/_react.default.createElement(_pane.PaneContextMenuButton, {
      items: menuItems,
      itemGroups: menuItemGroups,
      key: "$contextMenu",
      onAction: handleAction
    });
  }, [handleAction, menuItems, menuItemGroups]);
  var actions = (0, _react.useMemo)(() => {
    if (actionItems.length === 0 && !contextMenu) return null;
    var actionButtons = actionItems.map((action, actionIndex) => {
      if (action.intent) {
        return /*#__PURE__*/_react.default.createElement(_ui.Tooltip, {
          content: /*#__PURE__*/_react.default.createElement(_ui.Box, {
            padding: 2
          }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
            size: 1
          }, action.title)),
          disabled: !action.title,
          key: action.key || actionIndex,
          placement: "bottom"
        }, /*#__PURE__*/_react.default.createElement(_IntentButton.IntentButton, {
          "aria-label": String(action.title),
          icon: action.icon || _icons.UnknownIcon,
          intent: action.intent,
          key: action.key || actionIndex,
          mode: "bleed"
        }));
      }

      return /*#__PURE__*/_react.default.createElement(_ui.Tooltip, {
        content: /*#__PURE__*/_react.default.createElement(_ui.Box, {
          padding: 2
        }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
          size: 1
        }, action.title)),
        disabled: !action.title,
        key: action.key || actionIndex,
        placement: "bottom"
      }, /*#__PURE__*/_react.default.createElement(_ui.Button, {
        "aria-label": String(action.title),
        icon: action.icon || _icons.UnknownIcon,
        key: action.key || actionIndex,
        mode: "bleed",
        onClick: () => handleAction(action)
      }));
    });
    return /*#__PURE__*/_react.default.createElement(_ui.Inline, {
      space: 1
    }, [...actionButtons, contextMenu]);
  }, [actionItems, contextMenu, handleAction]);

  if (!actions && !title) {
    return null;
  }

  return /*#__PURE__*/_react.default.createElement(_pane.PaneHeader, {
    actions: actions,
    backButton: features.backButton && index > 0 && /*#__PURE__*/_react.default.createElement(_ui.Button, {
      as: _paneRouter.BackLink,
      "data-as": "a",
      icon: _icons.ArrowLeftIcon,
      mode: "bleed"
    }),
    title: title
  });
}