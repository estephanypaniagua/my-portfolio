"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DocumentListPaneHeader = DocumentListPaneHeader;

var _icons = require("@sanity/icons");

var _structure = require("@sanity/structure");

var _ui = require("@sanity/ui");

var _schema = _interopRequireDefault(require("part:@sanity/base/schema"));

var _react = _interopRequireWildcard(require("react"));

var _IntentButton = require("../../components/IntentButton");

var _pane = require("../../components/pane");

var _deskTool = require("../../contexts/deskTool");

var _paneRouter = require("../../contexts/paneRouter");

var _useDeskToolPaneActions = require("../useDeskToolPaneActions");

var _CreateMenuButton = require("./CreateMenuButton");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Detects whether a menu item is the default create menu item.
 *
 * Itâ€™s used to figure out which menu item we should replace, so we can render
 * the template menu instead.
 *
 * NOTE: this feels like a rather hacky solution, which should be replaced when
 * providing correctly prepared `menuItems` to `DocumentListPane`.
 *
 * @todo: remove this when `menuItems` are correctly provided.
 */
function isDefaultCreateActionItem(actionItem, schemaType) {
  var intent = actionItem.intent;
  var intentParams = typeof (intent === null || intent === void 0 ? void 0 : intent.params) === 'object' ? intent.params : {};
  return intent && schemaType && actionItem.title === "Create new ".concat(schemaType.title) && intent.type === 'create' && intentParams.type === schemaType.name && intentParams.template === schemaType.name && typeof actionItem.showAsAction === 'object' && actionItem.showAsAction.whenCollapsed === true;
}

function DocumentListPaneHeader(props) {
  var index = props.index,
      initialValueTemplates = props.initialValueTemplates,
      menuItemsProp = props.menuItems,
      menuItemGroups = props.menuItemGroups,
      schemaTypeName = props.schemaTypeName,
      _setLayout = props.setLayout,
      _setSortOrder = props.setSortOrder,
      title = props.title;

  var _useDeskTool = (0, _deskTool.useDeskTool)(),
      features = _useDeskTool.features;

  var _usePane = (0, _pane.usePane)(),
      collapsed = _usePane.collapsed;

  var schemaType = schemaTypeName ? _schema.default.get(schemaTypeName) : null;
  var actionHandlers = (0, _react.useMemo)(() => ({
    setLayout: _ref => {
      var value = _ref.layout;

      _setLayout(value);
    },
    setSortOrder: sort => {
      _setSortOrder(sort);
    }
  }), [_setLayout, _setSortOrder]);
  var handleAction = (0, _react.useCallback)(item => {
    var handler = // eslint-disable-next-line no-nested-ternary
    typeof item.action === 'function' ? item.action : typeof item.action === 'string' ? actionHandlers[item.action] : null;

    if (handler) {
      handler(item.params);
      return true;
    }

    return false;
  }, [actionHandlers]);
  var createMenuItems = (0, _react.useMemo)(() => initialValueTemplates ? _structure.StructureBuilder.menuItemsFromInitialValueTemplateItems(initialValueTemplates) : [], [initialValueTemplates]);

  var _useDeskToolPaneActio = (0, _useDeskToolPaneActions.useDeskToolPaneActions)({
    collapsed,
    menuItems: menuItemsProp
  }),
      actionItems = _useDeskToolPaneActio.actionItems,
      menuItems = _useDeskToolPaneActio.menuItems;

  var contextMenu = (0, _react.useMemo)(() => menuItems.length ? /*#__PURE__*/_react.default.createElement(_pane.PaneContextMenuButton, {
    items: menuItems,
    itemGroups: menuItemGroups,
    key: "$ContextMenu",
    onAction: handleAction
  }) : null, [handleAction, menuItems, menuItemGroups]);
  var actions = (0, _react.useMemo)(() => {
    var foundCreateButton = false;
    var actionNodes = actionItems.map((action, actionIndex) => {
      // Replace the "Create" button when there are multiple initial value templates
      if (createMenuItems.length > 1 && isDefaultCreateActionItem(action, schemaType)) {
        foundCreateButton = true;
        return /*#__PURE__*/_react.default.createElement(_CreateMenuButton.CreateMenuButton, {
          items: createMenuItems,
          key: action.key || actionIndex
        });
      }

      if (action.intent) {
        return /*#__PURE__*/_react.default.createElement(_ui.Tooltip, {
          content: /*#__PURE__*/_react.default.createElement(_ui.Box, {
            padding: 2
          }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
            size: 1
          }, action.title)),
          disabled: !action.title,
          key: action.key || actionIndex,
          placement: "bottom"
        }, /*#__PURE__*/_react.default.createElement(_IntentButton.IntentButton, {
          "aria-label": String(action.title),
          icon: action.icon || _icons.UnknownIcon,
          intent: action.intent,
          key: action.key || actionIndex,
          mode: "bleed"
        }));
      }

      return null;
    });
    var createMenuButton = foundCreateButton || createMenuItems.length <= 1 ? null : /*#__PURE__*/_react.default.createElement(_CreateMenuButton.CreateMenuButton, {
      items: createMenuItems,
      key: "$CreateMenuButton"
    });
    return /*#__PURE__*/_react.default.createElement(_ui.Inline, {
      space: 1
    }, [...actionNodes, createMenuButton, contextMenu]);
  }, [actionItems, createMenuItems, contextMenu, schemaType]);
  return /*#__PURE__*/_react.default.createElement(_pane.PaneHeader, {
    actions: actions,
    backButton: features.backButton && index > 0 && /*#__PURE__*/_react.default.createElement(_ui.Button, {
      as: _paneRouter.BackLink,
      "data-as": "a",
      icon: _icons.ArrowLeftIcon,
      mode: "bleed"
    }),
    title: title
  });
}