"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPanes = getPanes;

var _omit2 = _interopRequireDefault(require("lodash/omit"));

var _paneRouter = require("./contexts/paneRouter");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// eslint-disable-next-line complexity
function getPanes(resolvedPanes, routerPanes) {
  var path = '';
  var paneIndex = 0;
  var ret = [];
  var paneKeys = routerPanes.reduce((ids, group) => ids.concat(group.map(sibling => sibling.id)), ['root']);
  var paneGroups = [[{
    id: 'root'
  }]].concat(routerPanes || []);
  var groupsLen = paneGroups.length;

  for (var groupIndex = 0; groupIndex < groupsLen; groupIndex += 1) {
    var group = paneGroups[groupIndex];
    var siblingsLen = group.length;

    for (var siblingIndex = 0; siblingIndex < siblingsLen; siblingIndex += 1) {
      var sibling = group[siblingIndex];
      var pane = resolvedPanes[paneIndex];

      if (pane) {
        path += ";".concat(typeof pane === 'object' && pane.id || "[".concat(paneIndex, "]"));
        var duplicate = siblingIndex > 0 && sibling.id === group[0].id;
        var itemId = paneKeys[paneIndex] || 'root';
        var rootParams = (0, _omit2.default)(group[0].params || {}, _paneRouter.exclusiveParams);
        var nextGroup = paneGroups[groupIndex + 1];
        ret.push({
          active: groupIndex === groupsLen - 2,
          childItemId: nextGroup && nextGroup[0].id || null,
          index: paneIndex,
          itemId,
          groupIndex,
          key: "".concat(typeof pane === 'object' && pane.type || 'unknown', "-").concat(itemId, "-").concat(siblingIndex),
          pane,
          params: _objectSpread(_objectSpread({}, rootParams), sibling.params || {}),
          path,
          payload: duplicate ? sibling.payload || group[0].payload : sibling.payload,
          selected: paneIndex === resolvedPanes.length - 1,
          siblingIndex
        });
      }

      paneIndex += 1;
    }
  }

  return ret;
}