import { Subscribable, Observable } from 'rxjs';
import { PaneNode, RouterPanes, UnresolvedPaneNode, StructureErrorType } from '../types';
import { LOADING_PANE } from '../constants';
declare global {
    const __DEV__: boolean;
}
export declare function resolvePanes(pane: UnresolvedPaneNode, paneGroups: RouterPanes, previousPanes: Array<PaneNode | typeof LOADING_PANE>, fromIndex: [number, number], options?: {
    silent?: boolean;
}): Observable<Array<PaneNode | typeof LOADING_PANE>>;
export declare const maybeSerialize: (structure: UnresolvedPaneNode) => PaneNode | Subscribable<PaneNode> | PromiseLike<PaneNode>;
export declare const loadStructure: () => Observable<UnresolvedPaneNode>;
export declare const useStructure: (segments: RouterPanes | undefined, options?: {}) => {
    structure: Array<PaneNode | typeof LOADING_PANE> | undefined;
    error: StructureErrorType | undefined;
};
export declare const setStructureResolveError: (err: StructureErrorType) => void;
//# sourceMappingURL=resolvePanes.d.ts.map