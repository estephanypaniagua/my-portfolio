import { Observable } from 'rxjs';
import { RouterPaneGroup, PaneNode } from './types';
import { LOADING_PANE } from './constants';
/**
 * @internal
 */
export declare const hasLoading: (panes: Array<PaneNode | typeof LOADING_PANE>) => boolean;
/**
 * @internal
 */
export declare const isSaveHotkey: (event: KeyboardEvent) => boolean;
/**
 * @internal
 */
export declare function getPaneDiffIndex(nextPanes: any, prevPanes: any): [number, number] | undefined;
interface GetIntentRouteParamsOptions {
    id: string;
    type?: string;
    templateName?: string;
    payloadParams?: Record<string, unknown>;
}
/**
 * @internal
 */
export declare function getIntentRouteParams({ id, type, payloadParams, templateName, }: GetIntentRouteParamsOptions): {
    intent: 'edit';
    params: {
        id: string;
        type?: string;
        templateName?: string;
    };
    payload: Record<string, unknown> | undefined;
};
/**
 * @internal
 */
export declare function getWaitMessages(path: string[]): Observable<string>;
/**
 * @internal
 */
export declare function toState(pathSegment: string): RouterPaneGroup[];
/**
 * @internal
 */
export declare function toPath(panes: RouterPaneGroup[]): string;
/**
 * @internal
 */
export declare function legacyEditParamsToState(params: string): Record<string, unknown>;
/**
 * @internal
 */
export declare function legacyEditParamsToPath(params: Record<string, unknown>): string;
export {};
//# sourceMappingURL=helpers.d.ts.map