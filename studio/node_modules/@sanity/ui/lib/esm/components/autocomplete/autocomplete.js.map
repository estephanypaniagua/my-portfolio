{
  "version": 3,
  "sources": ["../../../../src/components/autocomplete/autocomplete.tsx"],
  "sourcesContent": ["import {ChevronDownIcon} from '@sanity/icons'\nimport React, {\n  cloneElement,\n  forwardRef,\n  useCallback,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n} from 'react'\nimport {EMPTY_ARRAY} from '../../constants'\nimport {_hasFocus, _raf, focusFirstDescendant} from '../../helpers'\nimport {useForwardedRef, useResponsiveProp} from '../../hooks'\nimport {Box, BoxProps, Button, Card, PopoverProps, Stack, Text, TextInput} from '../../primitives'\nimport {AnimatedSpinnerIcon, ListBox, ResultsPopover, Root} from './autocomplete.styles'\nimport {AutocompleteOption} from './autocompleteOption'\nimport {autocompleteReducer} from './autocompleteReducer'\nimport {\n  EMPTY_RECORD,\n  AUTOCOMPLETE_LISTBOX_IGNORE_KEYS,\n  AUTOCOMPLETE_POPOVER_FALLBACK_PLACEMENTS,\n  AUTOCOMPLETE_POPOVER_MARGINS,\n  AUTOCOMPLETE_POPOVER_PLACEMENT,\n} from './constants'\nimport {AutocompleteOpenButtonProps, BaseAutocompleteOption} from './types'\n\n/**\n * @public\n */\nexport interface AutocompleteProps<Option extends BaseAutocompleteOption> {\n  border?: boolean\n  customValidity?: string\n  filterOption?: (query: string, option: Option) => boolean\n  fontSize?: number | number[]\n  icon?: React.ComponentType | React.ReactNode\n  id: string\n  /**\n   * @beta\n   */\n  listBox?: BoxProps\n  loading?: boolean\n  onChange?: (value: string) => void\n  onQueryChange?: (query: string | null) => void\n  onSelect?: (value: string) => void\n  /**\n   * @beta\n   */\n  openButton?: boolean | AutocompleteOpenButtonProps\n  options?: Option[]\n  padding?: number | number[]\n  popover?: Omit<PopoverProps, 'content' | 'onMouseEnter' | 'onMouseLeave' | 'open'>\n  prefix?: React.ReactNode\n  radius?: number | number[]\n  /**\n   * @beta\n   */\n  relatedElements?: HTMLElement[]\n  renderOption?: (option: Option) => React.ReactElement\n  /**\n   * @beta\n   */\n  renderPopover?: (\n    props: {\n      content: React.ReactElement | null\n      hidden: boolean\n      inputElement: HTMLInputElement | null\n    },\n    ref: React.Ref<HTMLDivElement>\n  ) => React.ReactNode\n  renderValue?: (value: string, option?: Option) => string\n  suffix?: React.ReactNode\n  value?: string\n}\n\nconst defaultRenderValue = (value: string, option?: BaseAutocompleteOption) =>\n  option ? option.value : value\n\nconst defaultFilterOption = (query: string, option: BaseAutocompleteOption) =>\n  option.value.toLowerCase().indexOf(query.toLowerCase()) > -1\n\nconst InnerAutocomplete = forwardRef(function InnerAutocomplete<\n  Option extends BaseAutocompleteOption\n>(\n  props: AutocompleteProps<Option> &\n    Omit<\n      React.HTMLProps<HTMLInputElement>,\n      | 'aria-activedescendant'\n      | 'aria-autocomplete'\n      | 'aria-expanded'\n      | 'aria-owns'\n      | 'as'\n      | 'autoCapitalize'\n      | 'autoComplete'\n      | 'autoCorrect'\n      | 'id'\n      | 'inputMode'\n      | 'onChange'\n      | 'onSelect'\n      | 'prefix'\n      | 'ref'\n      | 'role'\n      | 'spellCheck'\n      | 'type'\n      | 'value'\n    >,\n  ref: React.Ref<HTMLInputElement>\n) {\n  const {\n    border = true,\n    customValidity,\n    disabled,\n    filterOption: filterOptionProp,\n    fontSize = 2,\n    icon,\n    id,\n    listBox = {},\n    loading,\n    onBlur,\n    onChange,\n    onFocus,\n    onQueryChange,\n    onSelect,\n    openButton,\n    options: optionsProp,\n    padding: paddingProp = 3,\n    popover = {},\n    prefix,\n    radius = 3,\n    readOnly,\n    relatedElements,\n    renderOption: renderOptionProp,\n    renderPopover,\n    renderValue = defaultRenderValue,\n    value: valueProp,\n    ...restProps\n  } = props\n\n  const [state, dispatch] = useReducer(autocompleteReducer, {\n    activeValue: valueProp || null,\n    focused: false,\n    listFocused: false,\n    query: null,\n    value: valueProp || null,\n  })\n\n  const {activeValue, focused, listFocused, query, value} = state\n\n  const defaultRenderOption = useCallback(\n    ({value}: BaseAutocompleteOption) => (\n      <Card data-as=\"button\" padding={paddingProp} radius={2} tone=\"inherit\">\n        <Text size={fontSize} textOverflow=\"ellipsis\">\n          {value}\n        </Text>\n      </Card>\n    ),\n    [fontSize, paddingProp]\n  )\n\n  const renderOption =\n    typeof renderOptionProp === 'function' ? renderOptionProp : defaultRenderOption\n  const filterOption =\n    typeof filterOptionProp === 'function' ? filterOptionProp : defaultFilterOption\n  const [rootElement, setRootElement] = useState<HTMLDivElement | null>(null)\n  const [resultsPopoverElement, setResultsPopoverElement] = useState<HTMLDivElement | null>(null)\n  const inputElementRef = useRef<HTMLInputElement | null>(null)\n  const listBoxElementRef = useRef<HTMLDivElement | null>(null)\n  const focusedElementRef = useRef<HTMLElement | null>(null)\n  const valueRef = useRef(value)\n  const valuePropRef = useRef(valueProp)\n  const forwardedRef = useForwardedRef(ref)\n  const popoverMouseWithinRef = useRef(false)\n  const listBoxId = `${id}-listbox`\n  const options = Array.isArray(optionsProp) ? optionsProp : EMPTY_ARRAY\n  const padding = useResponsiveProp(paddingProp)\n  const currentOption = useMemo(\n    () => (value !== null ? options.find((o) => o.value === value) : undefined),\n    [options, value]\n  )\n  const filteredOptions = useMemo(\n    () => options.filter((option) => (query ? filterOption(query, option) : true)),\n    [filterOption, options, query]\n  )\n  const filteredOptionsLen = filteredOptions.length\n  const activeItemId = activeValue ? `${id}-option-${activeValue}` : undefined\n  const expanded = (query !== null && loading) || (focused && query !== null)\n\n  const handleRootBlur = useCallback(\n    (event: React.FocusEvent<HTMLInputElement>) => {\n      setTimeout(() => {\n        // NOTE: This is a workaround for a bug that may happen in Chrome (clicking the scrollbar\n        // closes the results in certain situations):\n        // - Do not handle blur if the mouse is within the popover\n        if (popoverMouseWithinRef.current) {\n          return\n        }\n\n        const elements: HTMLElement[] = (relatedElements || []).concat(\n          rootElement ? [rootElement] : [],\n          resultsPopoverElement ? [resultsPopoverElement] : []\n        )\n\n        let focusInside = false\n\n        if (document.activeElement) {\n          for (const e of elements) {\n            if (e === document.activeElement || e.contains(document.activeElement)) {\n              focusInside = true\n              break\n            }\n          }\n        }\n\n        if (focusInside === false) {\n          dispatch({type: 'root/blur'})\n          popoverMouseWithinRef.current = false\n          if (onQueryChange) onQueryChange(null)\n          if (onBlur) onBlur(event)\n        }\n      }, 0)\n    },\n    [onBlur, onQueryChange, relatedElements, resultsPopoverElement, rootElement]\n  )\n\n  const handleRootFocus = useCallback((event: React.FocusEvent) => {\n    const listBoxElement = listBoxElementRef.current\n    const focusedElement = event.target instanceof HTMLElement ? event.target : null\n\n    focusedElementRef.current = focusedElement\n\n    const nextListFocused = Boolean(\n      listBoxElement && focusedElement && listBoxElement.contains(focusedElement)\n    )\n\n    dispatch({type: 'root/setListFocused', listFocused: nextListFocused})\n  }, [])\n\n  const handleOptionSelect = useCallback(\n    (v: string) => {\n      dispatch({type: 'value/change', value: v})\n\n      popoverMouseWithinRef.current = false\n\n      if (onSelect) onSelect(v)\n\n      valueRef.current = v\n\n      if (onChange) onChange(v)\n      if (onQueryChange) onQueryChange(null)\n\n      inputElementRef.current?.focus()\n    },\n    [onChange, onSelect, onQueryChange]\n  )\n\n  const handleRootKeyDown = useCallback(\n    (event: React.KeyboardEvent<HTMLElement>) => {\n      if (event.key === 'ArrowDown') {\n        event.preventDefault()\n\n        if (!filteredOptionsLen) return\n\n        const activeOption = filteredOptions.find((o) => o.value === activeValue)\n        const activeIndex = activeOption ? filteredOptions.indexOf(activeOption) : -1\n        const nextActiveOption = filteredOptions[(activeIndex + 1) % filteredOptionsLen]\n\n        if (nextActiveOption) {\n          dispatch({type: 'root/setActiveValue', value: nextActiveOption.value, listFocused: true})\n        }\n\n        return\n      }\n\n      if (event.key === 'ArrowUp') {\n        event.preventDefault()\n\n        if (!filteredOptionsLen) return\n\n        const activeOption = filteredOptions.find((o) => o.value === activeValue)\n        const activeIndex = activeOption ? filteredOptions.indexOf(activeOption) : -1\n        const nextActiveOption =\n          filteredOptions[\n            activeIndex === -1\n              ? filteredOptionsLen - 1\n              : (filteredOptionsLen + activeIndex - 1) % filteredOptionsLen\n          ]\n\n        if (nextActiveOption) {\n          dispatch({type: 'root/setActiveValue', value: nextActiveOption.value, listFocused: true})\n        }\n\n        return\n      }\n\n      if (event.key === 'Escape') {\n        dispatch({type: 'root/escape'})\n        popoverMouseWithinRef.current = false\n        if (onQueryChange) onQueryChange(null)\n        inputElementRef.current?.focus()\n\n        return\n      }\n\n      const target = event.target as Node\n      const listEl = listBoxElementRef.current\n\n      if (\n        (listEl === target || listEl?.contains(target)) &&\n        !AUTOCOMPLETE_LISTBOX_IGNORE_KEYS.includes(event.key)\n      ) {\n        inputElementRef.current?.focus()\n\n        return\n      }\n    },\n    [activeValue, filteredOptions, filteredOptionsLen, onQueryChange]\n  )\n\n  const handleInputChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      const nextQuery = event.currentTarget.value\n\n      dispatch({type: 'input/change', query: nextQuery})\n\n      if (onQueryChange) onQueryChange(nextQuery)\n    },\n    [onQueryChange]\n  )\n\n  const handleInputFocus = useCallback(\n    (event: React.FocusEvent<HTMLInputElement>) => {\n      if (!focused) {\n        dispatch({type: 'input/focus'})\n\n        if (onFocus) onFocus(event)\n      }\n    },\n    [focused, onFocus]\n  )\n\n  const handlePopoverMouseEnter = useCallback(() => {\n    popoverMouseWithinRef.current = true\n  }, [])\n\n  const handlePopoverMouseLeave = useCallback(() => {\n    popoverMouseWithinRef.current = false\n  }, [])\n\n  const handleClearButtonClick = useCallback(() => {\n    dispatch({type: 'root/clear'})\n    valueRef.current = ''\n    if (onChange) onChange('')\n    if (onQueryChange) onQueryChange(null)\n    inputElementRef.current?.focus()\n  }, [onChange, onQueryChange])\n\n  const handleClearButtonFocus = useCallback(() => {\n    dispatch({type: 'input/focus'})\n  }, [])\n\n  // Change the value when `value` prop changes\n  useEffect(() => {\n    if (valueProp !== valuePropRef.current) {\n      valuePropRef.current = valueProp\n\n      if (valueProp !== undefined) {\n        dispatch({type: 'value/change', value: valueProp})\n        valueRef.current = valueProp\n      }\n\n      return\n    }\n\n    if (valueProp !== value) {\n      dispatch({type: 'value/change', value: valueProp || null})\n    }\n  }, [valueProp, value])\n\n  // Reset active item when closing\n  useEffect(() => {\n    if (!focused) {\n      if (valueRef.current) {\n        dispatch({type: 'root/setActiveValue', value: valueRef.current})\n      }\n    }\n  }, [focused])\n\n  // Focus the selected item\n  useEffect(() => {\n    const listElement = listBoxElementRef.current\n\n    if (!listElement) return\n\n    const activeOption = filteredOptions.find((o) => o.value === activeValue)\n\n    if (activeOption) {\n      const activeIndex = filteredOptions.indexOf(activeOption)\n      const activeItemElement = listElement.childNodes[activeIndex] as HTMLLIElement | undefined\n\n      if (activeItemElement) {\n        if (_hasFocus(activeItemElement)) {\n          // already focused\n          return\n        }\n\n        focusFirstDescendant(activeItemElement)\n      }\n    }\n  }, [activeValue, filteredOptions])\n\n  const setRef = useCallback(\n    (el: HTMLInputElement | null) => {\n      inputElementRef.current = el\n      forwardedRef.current = el\n    },\n    [forwardedRef]\n  )\n\n  const clearButton = useMemo(() => {\n    if (!loading && !disabled && value) {\n      return {\n        'aria-label': 'Clear',\n        onFocus: handleClearButtonFocus,\n      }\n    }\n\n    return undefined\n  }, [disabled, handleClearButtonFocus, loading, value])\n\n  const openButtonBoxPadding = useMemo(() => padding.map((v) => v - 2), [padding])\n  const openButtonPadding = useMemo(() => padding.map((v) => v - 1), [padding])\n  const openButtonProps: AutocompleteOpenButtonProps = useMemo(\n    () => (typeof openButton === 'object' ? openButton : EMPTY_RECORD),\n    [openButton]\n  )\n\n  const handleOpenClick = useCallback(\n    (event: React.MouseEvent<HTMLButtonElement>) => {\n      dispatch({\n        type: 'root/open',\n        query: value ? renderValue(value, currentOption) : '',\n      })\n\n      if (openButtonProps.onClick) openButtonProps.onClick(event)\n\n      _raf(() => inputElementRef.current?.focus())\n    },\n    [currentOption, openButtonProps, renderValue, value]\n  )\n\n  const openButtonNode = useMemo(\n    () =>\n      !disabled && !readOnly && openButton ? (\n        <Box aria-hidden={expanded} padding={openButtonBoxPadding}>\n          <Button\n            aria-label=\"Open\"\n            disabled={expanded}\n            fontSize={fontSize}\n            icon={ChevronDownIcon}\n            mode=\"bleed\"\n            padding={openButtonPadding}\n            {...openButtonProps}\n            onClick={handleOpenClick}\n          />\n        </Box>\n      ) : undefined,\n    [\n      disabled,\n      expanded,\n      fontSize,\n      handleOpenClick,\n      openButton,\n      openButtonBoxPadding,\n      openButtonPadding,\n      openButtonProps,\n      readOnly,\n    ]\n  )\n\n  const inputValue = useMemo(() => {\n    if (query === null) {\n      if (value !== null) {\n        return renderValue(value, currentOption)\n      }\n\n      return ''\n    }\n\n    return query\n  }, [currentOption, query, renderValue, value])\n\n  const input = (\n    <TextInput\n      {...restProps}\n      aria-activedescendant={activeItemId}\n      aria-autocomplete=\"list\"\n      aria-expanded={expanded}\n      aria-owns={listBoxId}\n      autoCapitalize=\"off\"\n      autoComplete=\"off\"\n      autoCorrect=\"off\"\n      border={border}\n      clearButton={clearButton}\n      customValidity={customValidity}\n      disabled={disabled}\n      fontSize={fontSize}\n      icon={icon}\n      iconRight={loading && AnimatedSpinnerIcon}\n      id={id}\n      inputMode=\"search\"\n      onChange={handleInputChange}\n      onClear={handleClearButtonClick}\n      onFocus={handleInputFocus}\n      padding={padding}\n      prefix={prefix}\n      radius={radius}\n      readOnly={readOnly}\n      ref={setRef}\n      role=\"combobox\"\n      spellCheck={false}\n      suffix={openButtonNode}\n      value={inputValue}\n    />\n  )\n\n  const handleListBoxKeyDown = useCallback(\n    (event: React.KeyboardEvent<HTMLDivElement>) => {\n      // If the focus is currently in the list, move focus to the input element\n      if (event.key === 'Tab') {\n        if (listFocused) inputElementRef.current?.focus()\n      }\n    },\n    [listFocused]\n  )\n\n  const content = useMemo(() => {\n    if (filteredOptions.length === 0) return null\n\n    return (\n      <ListBox onKeyDown={handleListBoxKeyDown} padding={1} {...listBox} tabIndex={-1}>\n        <Stack\n          as=\"ul\"\n          aria-multiselectable={false}\n          id={listBoxId}\n          ref={listBoxElementRef}\n          role=\"listbox\"\n          space={1}\n        >\n          {filteredOptions.map((option) => {\n            const active =\n              activeValue !== null ? option.value === activeValue : currentOption === option\n\n            return (\n              <AutocompleteOption\n                id={`${id}-option-${option.value}`}\n                key={option.value}\n                onSelect={handleOptionSelect}\n                selected={active}\n                value={option.value}\n              >\n                {cloneElement(renderOption(option), {\n                  disabled: loading,\n                  selected: active,\n                  tabIndex: listFocused && active ? 0 : -1,\n                })}\n              </AutocompleteOption>\n            )\n          })}\n        </Stack>\n      </ListBox>\n    )\n  }, [\n    activeValue,\n    currentOption,\n    filteredOptions,\n    handleOptionSelect,\n    handleListBoxKeyDown,\n    id,\n    listBox,\n    listBoxId,\n    listFocused,\n    loading,\n    renderOption,\n  ])\n\n  const results = useMemo(() => {\n    if (renderPopover) {\n      return renderPopover(\n        {content, hidden: !expanded, inputElement: inputElementRef.current},\n        setResultsPopoverElement\n      )\n    }\n\n    if (filteredOptionsLen === 0) {\n      return null\n    }\n\n    return (\n      <ResultsPopover\n        __unstable_margins={AUTOCOMPLETE_POPOVER_MARGINS}\n        arrow={false}\n        constrainSize\n        content={content}\n        fallbackPlacements={AUTOCOMPLETE_POPOVER_FALLBACK_PLACEMENTS}\n        matchReferenceWidth\n        onMouseEnter={handlePopoverMouseEnter}\n        onMouseLeave={handlePopoverMouseLeave}\n        open={expanded}\n        placement={AUTOCOMPLETE_POPOVER_PLACEMENT}\n        portal\n        radius={radius}\n        ref={setResultsPopoverElement}\n        referenceElement={inputElementRef.current}\n        {...popover}\n      />\n    )\n  }, [\n    content,\n    expanded,\n    filteredOptionsLen,\n    handlePopoverMouseEnter,\n    handlePopoverMouseLeave,\n    popover,\n    radius,\n    renderPopover,\n  ])\n\n  return (\n    <Root\n      data-ui=\"Autocomplete\"\n      onBlur={handleRootBlur}\n      onFocus={handleRootFocus}\n      onKeyDown={handleRootKeyDown}\n      ref={setRootElement}\n    >\n      {input}\n      {results}\n    </Root>\n  )\n})\n\n/**\n * @public\n */\nexport const Autocomplete = InnerAutocomplete as <Option extends BaseAutocompleteOption>(\n  props: AutocompleteProps<Option> &\n    Omit<\n      React.HTMLProps<HTMLInputElement>,\n      | 'aria-activedescendant'\n      | 'aria-autocomplete'\n      | 'aria-expanded'\n      | 'aria-owns'\n      | 'as'\n      | 'autoCapitalize'\n      | 'autoComplete'\n      | 'autoCorrect'\n      | 'id'\n      | 'inputMode'\n      | 'onChange'\n      | 'onSelect'\n      | 'prefix'\n      | 'ref'\n      | 'role'\n      | 'spellCheck'\n      | 'type'\n      | 'value'\n    > & {\n      ref?: React.Ref<HTMLInputElement>\n    }\n) => React.ReactElement\n"],
  "mappings": "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",
  "names": []
}
