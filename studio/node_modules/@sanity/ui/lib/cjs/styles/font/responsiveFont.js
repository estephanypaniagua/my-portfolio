var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
__export(exports, {
  fontSize: () => fontSize,
  responsiveFont: () => responsiveFont
});
var import_helpers = __toModule(require("../helpers"));
function responsiveFont(fontKey, props) {
  const { $size, $weight, theme } = props;
  const { fonts, media } = theme.sanity;
  const { family, sizes, weights, horizontalOffset } = fonts[fontKey];
  const fontWeight = $weight && weights[$weight] || weights.regular;
  const defaultSize = sizes[2];
  const base = {
    position: "relative",
    fontFamily: family,
    fontWeight,
    padding: "1px",
    margin: 0,
    "&:before": {
      content: '""',
      display: "block",
      height: 0
    },
    "&:after": {
      content: '""',
      display: "block",
      height: 0
    },
    "& > code, & > span": {
      display: "block"
    },
    "&:not([hidden])": {
      display: "block"
    }
  };
  const resp = (0, import_helpers.responsive)(media, (0, import_helpers.getResponsiveProp)($size), (sizeIndex) => fontSize(sizes[sizeIndex] || defaultSize, horizontalOffset));
  return [base, ...resp];
}
function fontSize(size, horizontalOffset) {
  const { ascenderHeight, descenderHeight, fontSize: fontSize2, iconSize, letterSpacing, lineHeight } = size;
  const negHeight = ascenderHeight + descenderHeight;
  const capHeight = lineHeight - negHeight;
  const iconOffset = (capHeight - iconSize) / 2;
  const customIconSize = Math.floor(fontSize2 * 1.125 / 2) * 2 + 1;
  const customIconOffset = (capHeight - customIconSize) / 2;
  return {
    fontSize: (0, import_helpers.rem)(fontSize2),
    lineHeight: `calc(${lineHeight} / ${fontSize2})`,
    letterSpacing: (0, import_helpers.rem)(letterSpacing),
    transform: `translateY(${(0, import_helpers.rem)(descenderHeight)})`,
    "&:before": {
      marginTop: `calc(${(0, import_helpers.rem)(0 - negHeight)} - 1px)`
    },
    "&:after": {
      marginBottom: "-1px"
    },
    "& > code, & > span": {
      margin: horizontalOffset ? `0 calc(${(0, import_helpers.rem)(0 - horizontalOffset * fontSize2)} - 1px)` : "0 -1px"
    },
    "& svg:not([data-sanity-icon])": {
      fontSize: `calc(${customIconSize} / 16 * 1rem)`,
      margin: [
        (0, import_helpers.rem)(customIconOffset),
        horizontalOffset ? `calc(${(0, import_helpers.rem)(customIconOffset)} + ${(0, import_helpers.rem)(horizontalOffset * fontSize2)})` : (0, import_helpers.rem)(customIconOffset)
      ].join(" ")
    },
    "& [data-sanity-icon]": {
      fontSize: `calc(${iconSize} / 16 * 1rem)`,
      margin: [
        (0, import_helpers.rem)(iconOffset),
        horizontalOffset ? `calc(${(0, import_helpers.rem)(iconOffset)} + ${(0, import_helpers.rem)(horizontalOffset * fontSize2)})` : (0, import_helpers.rem)(iconOffset)
      ].join(" ")
    }
  };
}
