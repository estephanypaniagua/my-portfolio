var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
__export(exports, {
  autocompleteReducer: () => autocompleteReducer
});
function autocompleteReducer(state, msg) {
  if (msg.type === "input/change") {
    return __spreadProps(__spreadValues({}, state), { activeValue: null, focused: true, query: msg.query });
  }
  if (msg.type === "input/focus") {
    return __spreadProps(__spreadValues({}, state), { focused: true });
  }
  if (msg.type === "root/blur") {
    return __spreadProps(__spreadValues({}, state), { focused: false, query: null });
  }
  if (msg.type === "root/clear") {
    return __spreadProps(__spreadValues({}, state), { activeValue: null, query: null, value: null });
  }
  if (msg.type === "root/escape") {
    return __spreadProps(__spreadValues({}, state), { focused: false, query: null });
  }
  if (msg.type === "root/open") {
    return __spreadProps(__spreadValues({}, state), { query: state.query || msg.query });
  }
  if (msg.type === "root/setActiveValue") {
    return __spreadProps(__spreadValues({}, state), { activeValue: msg.value, listFocused: msg.listFocused || state.listFocused });
  }
  if (msg.type === "root/setListFocused") {
    if (state.listFocused === msg.listFocused)
      return state;
    return __spreadProps(__spreadValues({}, state), { listFocused: msg.listFocused });
  }
  if (msg.type === "value/change") {
    return __spreadProps(__spreadValues({}, state), { activeValue: msg.value, query: null, value: msg.value });
  }
  return state;
}
