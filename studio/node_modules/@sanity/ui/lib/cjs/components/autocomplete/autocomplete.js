var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
__export(exports, {
  Autocomplete: () => Autocomplete
});
var import_icons = __toModule(require("@sanity/icons"));
var import_react = __toModule(require("react"));
var import_constants = __toModule(require("../../constants"));
var import_helpers = __toModule(require("../../helpers"));
var import_hooks = __toModule(require("../../hooks"));
var import_primitives = __toModule(require("../../primitives"));
var import_autocomplete = __toModule(require("./autocomplete.styles"));
var import_autocompleteOption = __toModule(require("./autocompleteOption"));
var import_autocompleteReducer = __toModule(require("./autocompleteReducer"));
var import_constants2 = __toModule(require("./constants"));
const defaultRenderValue = (value, option) => option ? option.value : value;
const defaultFilterOption = (query, option) => option.value.toLowerCase().indexOf(query.toLowerCase()) > -1;
const InnerAutocomplete = (0, import_react.forwardRef)(function InnerAutocomplete2(props, ref) {
  const _a = props, {
    border = true,
    customValidity,
    disabled,
    filterOption: filterOptionProp,
    fontSize = 2,
    icon,
    id,
    listBox = {},
    loading,
    onBlur,
    onChange,
    onFocus,
    onQueryChange,
    onSelect,
    openButton,
    options: optionsProp,
    padding: paddingProp = 3,
    popover = {},
    prefix,
    radius = 3,
    readOnly,
    relatedElements,
    renderOption: renderOptionProp,
    renderPopover,
    renderValue = defaultRenderValue,
    value: valueProp
  } = _a, restProps = __objRest(_a, [
    "border",
    "customValidity",
    "disabled",
    "filterOption",
    "fontSize",
    "icon",
    "id",
    "listBox",
    "loading",
    "onBlur",
    "onChange",
    "onFocus",
    "onQueryChange",
    "onSelect",
    "openButton",
    "options",
    "padding",
    "popover",
    "prefix",
    "radius",
    "readOnly",
    "relatedElements",
    "renderOption",
    "renderPopover",
    "renderValue",
    "value"
  ]);
  const [state, dispatch] = (0, import_react.useReducer)(import_autocompleteReducer.autocompleteReducer, {
    activeValue: valueProp || null,
    focused: false,
    listFocused: false,
    query: null,
    value: valueProp || null
  });
  const { activeValue, focused, listFocused, query, value } = state;
  const defaultRenderOption = (0, import_react.useCallback)(({ value: value2 }) => /* @__PURE__ */ import_react.default.createElement(import_primitives.Card, {
    "data-as": "button",
    padding: paddingProp,
    radius: 2,
    tone: "inherit"
  }, /* @__PURE__ */ import_react.default.createElement(import_primitives.Text, {
    size: fontSize,
    textOverflow: "ellipsis"
  }, value2)), [fontSize, paddingProp]);
  const renderOption = typeof renderOptionProp === "function" ? renderOptionProp : defaultRenderOption;
  const filterOption = typeof filterOptionProp === "function" ? filterOptionProp : defaultFilterOption;
  const [rootElement, setRootElement] = (0, import_react.useState)(null);
  const [resultsPopoverElement, setResultsPopoverElement] = (0, import_react.useState)(null);
  const inputElementRef = (0, import_react.useRef)(null);
  const listBoxElementRef = (0, import_react.useRef)(null);
  const focusedElementRef = (0, import_react.useRef)(null);
  const valueRef = (0, import_react.useRef)(value);
  const valuePropRef = (0, import_react.useRef)(valueProp);
  const forwardedRef = (0, import_hooks.useForwardedRef)(ref);
  const popoverMouseWithinRef = (0, import_react.useRef)(false);
  const listBoxId = `${id}-listbox`;
  const options = Array.isArray(optionsProp) ? optionsProp : import_constants.EMPTY_ARRAY;
  const padding = (0, import_hooks.useResponsiveProp)(paddingProp);
  const currentOption = (0, import_react.useMemo)(() => value !== null ? options.find((o) => o.value === value) : void 0, [options, value]);
  const filteredOptions = (0, import_react.useMemo)(() => options.filter((option) => query ? filterOption(query, option) : true), [filterOption, options, query]);
  const filteredOptionsLen = filteredOptions.length;
  const activeItemId = activeValue ? `${id}-option-${activeValue}` : void 0;
  const expanded = query !== null && loading || focused && query !== null;
  const handleRootBlur = (0, import_react.useCallback)((event) => {
    setTimeout(() => {
      if (popoverMouseWithinRef.current) {
        return;
      }
      const elements = (relatedElements || []).concat(rootElement ? [rootElement] : [], resultsPopoverElement ? [resultsPopoverElement] : []);
      let focusInside = false;
      if (document.activeElement) {
        for (const e of elements) {
          if (e === document.activeElement || e.contains(document.activeElement)) {
            focusInside = true;
            break;
          }
        }
      }
      if (focusInside === false) {
        dispatch({ type: "root/blur" });
        popoverMouseWithinRef.current = false;
        if (onQueryChange)
          onQueryChange(null);
        if (onBlur)
          onBlur(event);
      }
    }, 0);
  }, [onBlur, onQueryChange, relatedElements, resultsPopoverElement, rootElement]);
  const handleRootFocus = (0, import_react.useCallback)((event) => {
    const listBoxElement = listBoxElementRef.current;
    const focusedElement = event.target instanceof HTMLElement ? event.target : null;
    focusedElementRef.current = focusedElement;
    const nextListFocused = Boolean(listBoxElement && focusedElement && listBoxElement.contains(focusedElement));
    dispatch({ type: "root/setListFocused", listFocused: nextListFocused });
  }, []);
  const handleOptionSelect = (0, import_react.useCallback)((v) => {
    var _a2;
    dispatch({ type: "value/change", value: v });
    popoverMouseWithinRef.current = false;
    if (onSelect)
      onSelect(v);
    valueRef.current = v;
    if (onChange)
      onChange(v);
    if (onQueryChange)
      onQueryChange(null);
    (_a2 = inputElementRef.current) == null ? void 0 : _a2.focus();
  }, [onChange, onSelect, onQueryChange]);
  const handleRootKeyDown = (0, import_react.useCallback)((event) => {
    var _a2, _b;
    if (event.key === "ArrowDown") {
      event.preventDefault();
      if (!filteredOptionsLen)
        return;
      const activeOption = filteredOptions.find((o) => o.value === activeValue);
      const activeIndex = activeOption ? filteredOptions.indexOf(activeOption) : -1;
      const nextActiveOption = filteredOptions[(activeIndex + 1) % filteredOptionsLen];
      if (nextActiveOption) {
        dispatch({ type: "root/setActiveValue", value: nextActiveOption.value, listFocused: true });
      }
      return;
    }
    if (event.key === "ArrowUp") {
      event.preventDefault();
      if (!filteredOptionsLen)
        return;
      const activeOption = filteredOptions.find((o) => o.value === activeValue);
      const activeIndex = activeOption ? filteredOptions.indexOf(activeOption) : -1;
      const nextActiveOption = filteredOptions[activeIndex === -1 ? filteredOptionsLen - 1 : (filteredOptionsLen + activeIndex - 1) % filteredOptionsLen];
      if (nextActiveOption) {
        dispatch({ type: "root/setActiveValue", value: nextActiveOption.value, listFocused: true });
      }
      return;
    }
    if (event.key === "Escape") {
      dispatch({ type: "root/escape" });
      popoverMouseWithinRef.current = false;
      if (onQueryChange)
        onQueryChange(null);
      (_a2 = inputElementRef.current) == null ? void 0 : _a2.focus();
      return;
    }
    const target = event.target;
    const listEl = listBoxElementRef.current;
    if ((listEl === target || (listEl == null ? void 0 : listEl.contains(target))) && !import_constants2.AUTOCOMPLETE_LISTBOX_IGNORE_KEYS.includes(event.key)) {
      (_b = inputElementRef.current) == null ? void 0 : _b.focus();
      return;
    }
  }, [activeValue, filteredOptions, filteredOptionsLen, onQueryChange]);
  const handleInputChange = (0, import_react.useCallback)((event) => {
    const nextQuery = event.currentTarget.value;
    dispatch({ type: "input/change", query: nextQuery });
    if (onQueryChange)
      onQueryChange(nextQuery);
  }, [onQueryChange]);
  const handleInputFocus = (0, import_react.useCallback)((event) => {
    if (!focused) {
      dispatch({ type: "input/focus" });
      if (onFocus)
        onFocus(event);
    }
  }, [focused, onFocus]);
  const handlePopoverMouseEnter = (0, import_react.useCallback)(() => {
    popoverMouseWithinRef.current = true;
  }, []);
  const handlePopoverMouseLeave = (0, import_react.useCallback)(() => {
    popoverMouseWithinRef.current = false;
  }, []);
  const handleClearButtonClick = (0, import_react.useCallback)(() => {
    var _a2;
    dispatch({ type: "root/clear" });
    valueRef.current = "";
    if (onChange)
      onChange("");
    if (onQueryChange)
      onQueryChange(null);
    (_a2 = inputElementRef.current) == null ? void 0 : _a2.focus();
  }, [onChange, onQueryChange]);
  const handleClearButtonFocus = (0, import_react.useCallback)(() => {
    dispatch({ type: "input/focus" });
  }, []);
  (0, import_react.useEffect)(() => {
    if (valueProp !== valuePropRef.current) {
      valuePropRef.current = valueProp;
      if (valueProp !== void 0) {
        dispatch({ type: "value/change", value: valueProp });
        valueRef.current = valueProp;
      }
      return;
    }
    if (valueProp !== value) {
      dispatch({ type: "value/change", value: valueProp || null });
    }
  }, [valueProp, value]);
  (0, import_react.useEffect)(() => {
    if (!focused) {
      if (valueRef.current) {
        dispatch({ type: "root/setActiveValue", value: valueRef.current });
      }
    }
  }, [focused]);
  (0, import_react.useEffect)(() => {
    const listElement = listBoxElementRef.current;
    if (!listElement)
      return;
    const activeOption = filteredOptions.find((o) => o.value === activeValue);
    if (activeOption) {
      const activeIndex = filteredOptions.indexOf(activeOption);
      const activeItemElement = listElement.childNodes[activeIndex];
      if (activeItemElement) {
        if ((0, import_helpers._hasFocus)(activeItemElement)) {
          return;
        }
        (0, import_helpers.focusFirstDescendant)(activeItemElement);
      }
    }
  }, [activeValue, filteredOptions]);
  const setRef = (0, import_react.useCallback)((el) => {
    inputElementRef.current = el;
    forwardedRef.current = el;
  }, [forwardedRef]);
  const clearButton = (0, import_react.useMemo)(() => {
    if (!loading && !disabled && value) {
      return {
        "aria-label": "Clear",
        onFocus: handleClearButtonFocus
      };
    }
    return void 0;
  }, [disabled, handleClearButtonFocus, loading, value]);
  const openButtonBoxPadding = (0, import_react.useMemo)(() => padding.map((v) => v - 2), [padding]);
  const openButtonPadding = (0, import_react.useMemo)(() => padding.map((v) => v - 1), [padding]);
  const openButtonProps = (0, import_react.useMemo)(() => typeof openButton === "object" ? openButton : import_constants2.EMPTY_RECORD, [openButton]);
  const handleOpenClick = (0, import_react.useCallback)((event) => {
    dispatch({
      type: "root/open",
      query: value ? renderValue(value, currentOption) : ""
    });
    if (openButtonProps.onClick)
      openButtonProps.onClick(event);
    (0, import_helpers._raf)(() => {
      var _a2;
      return (_a2 = inputElementRef.current) == null ? void 0 : _a2.focus();
    });
  }, [currentOption, openButtonProps, renderValue, value]);
  const openButtonNode = (0, import_react.useMemo)(() => !disabled && !readOnly && openButton ? /* @__PURE__ */ import_react.default.createElement(import_primitives.Box, {
    "aria-hidden": expanded,
    padding: openButtonBoxPadding
  }, /* @__PURE__ */ import_react.default.createElement(import_primitives.Button, __spreadProps(__spreadValues({
    "aria-label": "Open",
    disabled: expanded,
    fontSize,
    icon: import_icons.ChevronDownIcon,
    mode: "bleed",
    padding: openButtonPadding
  }, openButtonProps), {
    onClick: handleOpenClick
  }))) : void 0, [
    disabled,
    expanded,
    fontSize,
    handleOpenClick,
    openButton,
    openButtonBoxPadding,
    openButtonPadding,
    openButtonProps,
    readOnly
  ]);
  const inputValue = (0, import_react.useMemo)(() => {
    if (query === null) {
      if (value !== null) {
        return renderValue(value, currentOption);
      }
      return "";
    }
    return query;
  }, [currentOption, query, renderValue, value]);
  const input = /* @__PURE__ */ import_react.default.createElement(import_primitives.TextInput, __spreadProps(__spreadValues({}, restProps), {
    "aria-activedescendant": activeItemId,
    "aria-autocomplete": "list",
    "aria-expanded": expanded,
    "aria-owns": listBoxId,
    autoCapitalize: "off",
    autoComplete: "off",
    autoCorrect: "off",
    border,
    clearButton,
    customValidity,
    disabled,
    fontSize,
    icon,
    iconRight: loading && import_autocomplete.AnimatedSpinnerIcon,
    id,
    inputMode: "search",
    onChange: handleInputChange,
    onClear: handleClearButtonClick,
    onFocus: handleInputFocus,
    padding,
    prefix,
    radius,
    readOnly,
    ref: setRef,
    role: "combobox",
    spellCheck: false,
    suffix: openButtonNode,
    value: inputValue
  }));
  const handleListBoxKeyDown = (0, import_react.useCallback)((event) => {
    var _a2;
    if (event.key === "Tab") {
      if (listFocused)
        (_a2 = inputElementRef.current) == null ? void 0 : _a2.focus();
    }
  }, [listFocused]);
  const content = (0, import_react.useMemo)(() => {
    if (filteredOptions.length === 0)
      return null;
    return /* @__PURE__ */ import_react.default.createElement(import_autocomplete.ListBox, __spreadProps(__spreadValues({
      onKeyDown: handleListBoxKeyDown,
      padding: 1
    }, listBox), {
      tabIndex: -1
    }), /* @__PURE__ */ import_react.default.createElement(import_primitives.Stack, {
      as: "ul",
      "aria-multiselectable": false,
      id: listBoxId,
      ref: listBoxElementRef,
      role: "listbox",
      space: 1
    }, filteredOptions.map((option) => {
      const active = activeValue !== null ? option.value === activeValue : currentOption === option;
      return /* @__PURE__ */ import_react.default.createElement(import_autocompleteOption.AutocompleteOption, {
        id: `${id}-option-${option.value}`,
        key: option.value,
        onSelect: handleOptionSelect,
        selected: active,
        value: option.value
      }, (0, import_react.cloneElement)(renderOption(option), {
        disabled: loading,
        selected: active,
        tabIndex: listFocused && active ? 0 : -1
      }));
    })));
  }, [
    activeValue,
    currentOption,
    filteredOptions,
    handleOptionSelect,
    handleListBoxKeyDown,
    id,
    listBox,
    listBoxId,
    listFocused,
    loading,
    renderOption
  ]);
  const results = (0, import_react.useMemo)(() => {
    if (renderPopover) {
      return renderPopover({ content, hidden: !expanded, inputElement: inputElementRef.current }, setResultsPopoverElement);
    }
    if (filteredOptionsLen === 0) {
      return null;
    }
    return /* @__PURE__ */ import_react.default.createElement(import_autocomplete.ResultsPopover, __spreadValues({
      __unstable_margins: import_constants2.AUTOCOMPLETE_POPOVER_MARGINS,
      arrow: false,
      constrainSize: true,
      content,
      fallbackPlacements: import_constants2.AUTOCOMPLETE_POPOVER_FALLBACK_PLACEMENTS,
      matchReferenceWidth: true,
      onMouseEnter: handlePopoverMouseEnter,
      onMouseLeave: handlePopoverMouseLeave,
      open: expanded,
      placement: import_constants2.AUTOCOMPLETE_POPOVER_PLACEMENT,
      portal: true,
      radius,
      ref: setResultsPopoverElement,
      referenceElement: inputElementRef.current
    }, popover));
  }, [
    content,
    expanded,
    filteredOptionsLen,
    handlePopoverMouseEnter,
    handlePopoverMouseLeave,
    popover,
    radius,
    renderPopover
  ]);
  return /* @__PURE__ */ import_react.default.createElement(import_autocomplete.Root, {
    "data-ui": "Autocomplete",
    onBlur: handleRootBlur,
    onFocus: handleRootFocus,
    onKeyDown: handleRootKeyDown,
    ref: setRootElement
  }, input, results);
});
const Autocomplete = InnerAutocomplete;
