var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
__export(exports, {
  VirtualList: () => VirtualList
});
var import_react = __toModule(require("react"));
var import_styled_components = __toModule(require("styled-components"));
var import_helpers = __toModule(require("../../helpers"));
var import_hooks = __toModule(require("../../hooks"));
var import_theme = __toModule(require("../../theme"));
const Root = import_styled_components.default.div`
  position: relative;
`;
const ItemWrapper = import_styled_components.default.div`
  position: absolute;
  left: 0;
  right: 0;
`;
const VirtualList = (0, import_react.forwardRef)(function VirtualList2(props, ref) {
  const _a = props, { as = "div", gap = 0, getItemKey, items = [], onChange, renderItem } = _a, restProps = __objRest(_a, ["as", "gap", "getItemKey", "items", "onChange", "renderItem"]);
  const { space } = (0, import_theme.useTheme)().sanity;
  const forwardedRef = (0, import_hooks.useForwardedRef)(ref);
  const wrapperRef = (0, import_react.useRef)(null);
  const [scrollTop, setScrollTop] = (0, import_react.useState)(0);
  const [scrollHeight, setScrollHeight] = (0, import_react.useState)(0);
  const [itemHeight, setItemHeight] = (0, import_react.useState)(-1);
  (0, import_react.useEffect)(() => {
    if (!wrapperRef.current)
      return;
    const firstElement = wrapperRef.current.firstChild;
    if (firstElement instanceof HTMLElement) {
      setItemHeight(firstElement.offsetHeight);
    }
  }, [renderItem]);
  (0, import_react.useEffect)(() => {
    if (!forwardedRef.current)
      return;
    let _scrollEl = forwardedRef.current.parentNode;
    while (_scrollEl && !(0, import_helpers._isScrollable)(_scrollEl)) {
      _scrollEl = _scrollEl.parentNode;
    }
    if (_scrollEl) {
      const scrollEl = _scrollEl;
      if (!(scrollEl instanceof HTMLElement))
        return;
      const handleScroll2 = () => {
        setScrollTop(scrollEl.scrollTop);
      };
      scrollEl.addEventListener("scroll", handleScroll2, { passive: true });
      const ro = new ResizeObserver((entries) => {
        setScrollHeight(entries[0].contentRect.height);
      });
      ro.observe(scrollEl);
      handleScroll2();
      return () => {
        scrollEl.removeEventListener("scroll", handleScroll2);
        ro.unobserve(scrollEl);
        ro.disconnect();
      };
    }
    const handleScroll = () => {
      setScrollTop(window.scrollY);
    };
    const handleResize = () => {
      setScrollHeight(window.innerHeight);
    };
    window.addEventListener("scroll", handleScroll, { passive: true });
    window.addEventListener("resize", handleResize);
    setScrollHeight(window.innerHeight);
    handleScroll();
    return () => {
      window.removeEventListener("scroll", handleScroll);
      window.removeEventListener("resize", handleResize);
    };
  }, [forwardedRef]);
  const len = items.length;
  const height = itemHeight ? len * (itemHeight + space[gap]) - space[gap] : 0;
  const fromIndex = height ? Math.max(Math.floor(scrollTop / height * len) - 2, 0) : 0;
  const toIndex = height ? Math.ceil((scrollTop + scrollHeight) / height * len) + 1 : 0;
  (0, import_react.useEffect)(() => {
    if (!onChange)
      return;
    onChange({ fromIndex, gap: space[gap], itemHeight, scrollHeight, scrollTop, toIndex });
  }, [fromIndex, gap, itemHeight, onChange, scrollHeight, scrollTop, space, toIndex]);
  const children = (0, import_react.useMemo)(() => {
    if (!renderItem || items.length === 0)
      return null;
    if (itemHeight === -1) {
      return [/* @__PURE__ */ import_react.default.createElement(ItemWrapper, {
        key: 0
      }, renderItem(items[0]))];
    }
    return items.slice(fromIndex, toIndex).map((item, _itemIndex) => {
      const itemIndex = fromIndex + _itemIndex;
      const node = renderItem(item);
      const key = getItemKey ? getItemKey(item, itemIndex) : itemIndex;
      return /* @__PURE__ */ import_react.default.createElement(ItemWrapper, {
        key,
        style: { top: itemIndex * (itemHeight + space[gap]) }
      }, node);
    });
  }, [fromIndex, gap, getItemKey, itemHeight, items, renderItem, space, toIndex]);
  const wrapperStyle = (0, import_react.useMemo)(() => ({ height }), [height]);
  return /* @__PURE__ */ import_react.default.createElement(Root, __spreadProps(__spreadValues({
    as,
    "data-ui": "VirtualList"
  }, restProps), {
    ref: forwardedRef
  }), /* @__PURE__ */ import_react.default.createElement("div", {
    ref: wrapperRef,
    style: wrapperStyle
  }, children));
});
